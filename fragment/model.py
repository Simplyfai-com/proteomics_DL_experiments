import torch.nn as nn
import torch
import numpy as np
import torch.nn.functional as F
import math
from functools import partial
from collections import OrderedDict
from einops import repeat


class masked_spectral_Loss(nn.Module):
    def __init__(self):
        super().__init__()

        self.epsilon = torch.finfo(torch.float32).eps    
        self.pi =  torch.tensor(np.pi, dtype=torch.float32)

        if torch.cuda.is_available():  # Check if GPU is available
            self.pi = self.pi.cuda()

    def forward(self, pred, true):

      pred_masked = ((true + 1) * pred) / (true + 1 + self.epsilon)
      true_masked = ((true + 1) * true) / (true + 1 + self.epsilon)

      pred_norm = F.normalize(true_masked, p=2, dim=-1)
      true_norm = F.normalize(pred_masked, p=2, dim=-1)

      product = torch.sum(pred_norm * true_norm, dim=1)
      arccos = torch.acos(product)

      loss =  2 * arccos / self.pi

      return loss.mean()
    
    

# customised LayerNorm
class LayerNorm(nn.LayerNorm):
    # We always use float32 for the LayerNorm for stable training
    def forward(self, x: torch.Tensor):
        orig_type = x.dtype
        ret = F.layer_norm(x.to(torch.float32), self.normalized_shape, self.weight.to(torch.float32), self.bias.to(torch.float32), self.eps)
        return ret.type(orig_type)

        
class PerceiverAttentionBlock(nn.Module):
    def __init__(self, d_model: int, n_heads: int):
        super().__init__()
        self.attn = nn.MultiheadAttention(d_model, n_heads)

        self.mlp = nn.Sequential(OrderedDict([
                ("c_fc", nn.Linear(d_model, d_model * 4)),
                ("gelu", nn.GELU()),
                ("c_proj", nn.Linear(d_model * 4, d_model))
        ]))

        self.ln_1 = LayerNorm(d_model) #nn.LayerNorm(d_model)
        self.ln_2 = LayerNorm(d_model) #nn.LayerNorm(d_model)
        self.ln_ff = LayerNorm(d_model) #nn.LayerNorm(d_model)

    def attention(self, q: torch.Tensor, kv: torch.Tensor):
        return self.attn(q, kv, kv, need_weights=False)[0]

    def forward(self, x: torch.Tensor, latents: torch.Tensor):
        latents = latents + self.attention(q=self.ln_1(latents), kv=self.ln_2(x))
        latents = latents + self.mlp(self.ln_ff(latents))
        return latents


class PerceiverResampler(nn.Module):
    def __init__(self, width: int, layers: int, heads: int, num_latents: int):
        super().__init__()
        scale = width ** -0.5
        self.latents = nn.Parameter(scale * torch.randn(num_latents, width))
        self.perceiver_blocks = nn.Sequential(*[PerceiverAttentionBlock(width, heads) for _ in range(layers)])

    def forward(self, x_f, padding_mask=None):
        x = repeat(self.latents, 'l d -> l b d', b=x_f.shape[1])

        for p_block in self.perceiver_blocks:
            x = p_block(x_f, x)

        return x  # num_latents, batch_size, output_dim
    

def _no_grad_trunc_normal_(tensor, mean, std, a, b):

    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0., training: bool = False):
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x, padding_mask=None):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]

        attn = (q @ k.transpose(-2, -1)) * self.scale

        if padding_mask is not None:
            attn = attn.masked_fill(padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))

        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x, attn


class Block(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, padding_mask=None):
        y, attn = self.attn(self.norm1(x), padding_mask)
        x = x + self.drop_path(y)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x

class Transformer(nn.Module):
    def __init__(self, input_size=22, embed_dim=768, depth=12, num_heads=12, mlp_ratio=4., 
                 qkv_bias=False, qk_scale=None, drop_rate=0.1, attn_drop_rate=0.1,
                 drop_path_rate=0.1, norm_layer=nn.LayerNorm):
        super().__init__()
        self.num_features = self.embed_dim = embed_dim

        self.embedding = nn.Embedding(input_size, embed_dim)
        
        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, 31, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer)
            for i in range(depth)])
        self.norm = norm_layer(embed_dim)

        self.pooling = nn.AdaptiveAvgPool1d(1)

        # Retention time prediction head
        self.head = nn.Sequential(
            nn.Linear(embed_dim*2, embed_dim*2),
            nn.GELU(),
            nn.Linear(embed_dim*2, 1),
        )

        trunc_normal_(self.pos_embed, std=.02)
        trunc_normal_(self.cls_token, std=.02)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def prepare_tokens(self, input_sequence):

        B = input_sequence.shape[0]

        embedding_output = self.embedding(input_sequence) 

        # add the [CLS] token to the embed patch tokens
        cls_tokens = self.cls_token.expand(B, -1, -1)
        x = torch.cat((cls_tokens, embedding_output), dim=1)

        # add positional encoding to each token
        x = x + self.pos_embed

        return self.pos_drop(x)

    def forward_enc(self, input_sequence):

        B = input_sequence.shape[0]

        x = self.prepare_tokens(input_sequence)

        padding_mask = input_sequence.eq(0)

        cls_token_tensor = torch.zeros((B, 1), dtype=torch.bool).to(device=padding_mask.device)
        padding_mask = torch.cat((cls_token_tensor, padding_mask), dim=-1)

        for blk in self.blocks:
            x = blk(x, padding_mask)

        return x

    def forward(self, input_sequence):

        x = self.forward_enc(input_sequence)

        return x
    
class FragmentModel(nn.Module):
    def __init__(self, input_size=22, embed_dim=768, depth=12, num_heads=12, mlp_ratio=4., 
                 qkv_bias=False, qk_scale=None, drop_rate=0.1, attn_drop_rate=0.1,
                 drop_path_rate=0.1, norm_layer=nn.LayerNorm):
        super().__init__()
        self.num_features = self.embed_dim = embed_dim

        num_charge_types = 6
        self.charge_embedding = nn.Embedding(num_embeddings=num_charge_types, embedding_dim=embed_dim)

        self.collision_energy = nn.Linear(1, embed_dim)

        self.nce_charge = nn.Sequential(
                                nn.Linear(embed_dim*2, embed_dim*4),
                                nn.GELU(),
                                nn.Linear(embed_dim*4, embed_dim),
                            )
        
        self.pep_fuse = nn.Sequential(
                                nn.Linear(embed_dim*2, embed_dim*4),
                                nn.GELU(),
                                nn.Linear(embed_dim*4, embed_dim),
                            )
        
        self.resampler = PerceiverResampler(width=256, layers=2, heads=8, num_latents=29)
        
        self.pep_encoder = Transformer(
                            input_size=22, embed_dim=256, depth=12, num_heads=8, mlp_ratio=4,
                            qkv_bias=True, norm_layer=partial(LayerNorm, eps=1e-6))

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer)
            for i in range(depth)])
        
        self.norm1 = norm_layer(embed_dim)
        self.norm2 = norm_layer(embed_dim)
        self.final_norm = norm_layer(embed_dim)

        # Retention time prediction head
        out_vec = 6
        self.head = nn.Sequential(
            nn.Linear(embed_dim, embed_dim*4),
            nn.GELU(),
            nn.Linear(embed_dim*4, out_vec),
            nn.Tanh(),
        )

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def freeze_backbone(self):
        print('freeze: im here')
        self.freeze = True
        modules = [self.pep_encoder]
        for i in range(len(modules)):
            for m in modules[i].modules():
                m.eval()
                for p in m.parameters():
                    if p.requires_grad:
                        p.requires_grad=False
        
    
    def unfreeze_backbone(self):
        print('unfreeze: im here')
        self.freeze = False
        modules = [self.pep_encoder]
        for i in range(len(modules)):
            for m in modules[i].modules():
                m.train()
                for p in m.parameters():
                    if p.requires_grad:
                        p.requires_grad=True

    def forward_enc(self, peptide_sequence, precursor_charge, collision_energy):

        #Padding mask
        padding_mask = peptide_sequence.eq(0)

        #peptide latent representations
        peptide_sequence = self.pep_encoder(peptide_sequence)

        precursor_charge = self.charge_embedding(precursor_charge).squeeze(1)
        collision_energy = self.collision_energy(collision_energy)

        #remove cls token
        x = peptide_sequence[:, 1:]

        cond_vec = torch.cat((precursor_charge, collision_energy), dim=-1)
        nce_charge = self.nce_charge(cond_vec).unsqueeze(1).expand(-1, x.shape[1], -1)

        nce_charge = self.norm1(nce_charge)
        x = self.norm2(x)

        x = torch.cat((x, nce_charge), dim=-1)
        x = self.pep_fuse(x)

        #add the positional information
        x = x + self.pep_encoder.pos_embed[:, 1:, :]

        for blk in self.blocks:
            x = blk(x, padding_mask)

        #tokens resampling
        x = self.resampler(x.permute(1,0,2)).permute(1,0,2)
        x = self.final_norm(x)

        return x

    def forward(self, peptide_sequence, precursor_charge, collision_energy):

        B = peptide_sequence.shape[0]

        x = self.forward_enc(peptide_sequence, precursor_charge, collision_energy)

        x = self.head(x)

        return x.reshape(B, -1)

